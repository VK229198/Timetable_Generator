import random

# Constants
DAYS = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
TIME_SLOTS = ["9:10-10:10", "10:10-11:10", "11:10-12:10", "12:10-1:10", "2:10-3:10", "3:10-4:10", "4:10-5:10"]
SECTIONS = ["A", "B", "C"]

# Fixed Slots
FIXED_SLOTS = {
    "Tuesday": {"2:10-3:10": "Minors", "3:10-4:10": "Minors", "4:10-5:10": "Minors"},
    "Thursday": {"2:10-3:10": "Minors", "3:10-4:10": "Minors", "4:10-5:10": "Minors"},
    "Wednesday": {"2:10-3:10": "Elective", "3:10-4:10": "Elective"}
}

# Course and Faculty Mapping
COURSES = {
    "Agile": ("Manasa", 2),
    "CN": ("Loki", 3),
    "IML": ("Rashika", 3),
    "Cloud": ("Ananya", 2),
    "Calc": ("Ram", 3)
}
LABS = {
    "Agile Lab": ("Manasa", 2),
    "CN Lab": ("Loki", 2),
    "IML Lab": ("Rashika", 2),
    "Cloud Lab": ("Ananya", 2)
}

# Generate initial population
def generate_initial_population(size=10):
    population = []
    for _ in range(size):
        timetable = {day: {slot: {} for slot in TIME_SLOTS} for day in DAYS}
        for day, slots in FIXED_SLOTS.items():
            for slot, course in slots.items():
                timetable[day][slot] = {section: course for section in SECTIONS}
        for section in SECTIONS:
            course_hours = {**COURSES, **LABS}
            assigned_hours = {course: 0 for course in course_hours}
            for day in DAYS:
                available_slots = [slot for slot in TIME_SLOTS if slot not in FIXED_SLOTS.get(day, {})]
                random.shuffle(available_slots)
                for course, (faculty, hours) in course_hours.items():
                    while assigned_hours[course] < hours and available_slots:
                        slot = available_slots.pop()
                        if not isinstance(timetable[day][slot], dict):
                            timetable[day][slot] = {}
                        if course not in timetable[day][slot].values():
                            timetable[day][slot][section] = course
                            assigned_hours[course] += 1
        population.append(timetable)
    return population

# Fitness function
def fitness(timetable):
    score = 0
    for day, slots in timetable.items():
        for slot, sections in slots.items():
            if not isinstance(sections, dict):
                continue
            faculty_assigned = {}
            for section, course in sections.items():
                faculty = COURSES.get(course, LABS.get(course, (None,)))[0]
                if faculty and faculty in faculty_assigned:
                    score -= 1
                else:
                    faculty_assigned[faculty] = True
    return score

# Selection
def selection(population):
    population.sort(key=fitness, reverse=True)
    return population[:5]

# Crossover
def crossover(parent1, parent2):
    child = {day: {slot: {} for slot in TIME_SLOTS} for day in DAYS}
    for day in DAYS:
        for slot in TIME_SLOTS:
            child[day][slot] = random.choice([parent1[day][slot], parent2[day][slot]])
    return child

# Mutation
def mutation(timetable, mutation_rate=0.1):
    for day in DAYS:
        for slot in TIME_SLOTS:
            if random.random() < mutation_rate and slot not in FIXED_SLOTS.get(day, {}):
                if not isinstance(timetable[day][slot], dict):
                    timetable[day][slot] = {}
                timetable[day][slot] = random.choice(list(COURSES.keys()) + list(LABS.keys()))
    return timetable

# Genetic Algorithm
def genetic_algorithm(generations=100, population_size=10):
    population = generate_initial_population(population_size)
    for _ in range(generations):
        selected = selection(population)
        new_population = selected[:]
        while len(new_population) < population_size:
            parent1, parent2 = random.sample(selected, 2)
            child = crossover(parent1, parent2)
            child = mutation(child)
            new_population.append(child)
        population = new_population
    return selection(population)[0]

# Display Timetable
def display_timetable(timetable):
    for day, slots in timetable.items():
        print(f"{day}:")
        for slot, sections in slots.items():
            subjects = ", ".join([f"{s}: {c}" for s, c in sections.items()])
            print(f"  {slot}: {subjects}")
        print()

# Run the algorithm
best_timetable = genetic_algorithm()
display_timetable(best_timetable)
